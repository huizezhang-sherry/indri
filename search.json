[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 tidyindex authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"H. Sherry Zhang. Author, maintainer. Dianne Cook. Author. Ursula Laa. Author. Nicolas Langrené. Author. Patricia Menéndez. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang H, Cook D, Laa U, Langrené N, Menéndez P (2023). tidyindex: general data pipeline computing indexes. R package version 0.0.1, https://github.com/huizezhang-sherry/tidyindex.","code":"@Manual{,   title = {tidyindex: A general data pipeline for computing indexes},   author = {H. Sherry Zhang and Dianne Cook and Ursula Laa and Nicolas Langrené and Patricia Menéndez},   year = {2023},   note = {R package version 0.0.1},   url = {https://github.com/huizezhang-sherry/tidyindex}, }"},{"path":"/index.html","id":"tidyindex","dir":"","previous_headings":"","what":"A general data pipeline for computing indexes","title":"A general data pipeline for computing indexes","text":"Tidyindex provides infrastructures construct analyse indexes pipeline workflow. pipeline workflow contains 9 modules users arrange index, including: spatial processing temporal processing variable transformation scaling dimension reduction distribution fit normalising benchmarking simplification package still early experimental stage ","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A general data pipeline for computing indexes","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"huizezhang-sherry/tidyindex\")"},{"path":"/reference/add_paras.html","id":null,"dir":"Reference","previous_headings":"","what":"Add parameters to an index table object — add_paras","title":"Add parameters to an index table object — add_paras","text":"function joins parameter table `paras` element index table object.","code":""},{"path":"/reference/add_paras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add parameters to an index table object — add_paras","text":"","code":"add_paras(data, para_tbl, by)"},{"path":"/reference/add_paras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add parameters to an index table object — add_paras","text":"data idx_tbl object para_tbl tibble data frame object parameter variables single column name (support tidyselect) `para_tbl` maps variable name data","code":""},{"path":"/reference/add_paras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add parameters to an index table object — add_paras","text":"index object","code":""},{"path":"/reference/add_paras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add parameters to an index table object — add_paras","text":"","code":"init(gggi) |> add_paras(gggi_weights, by = \"variable\") #> Index pipeline:  #> Summary: NULL #>  #> Data:  #> # A tibble: 146 × 22 #>    country      region index  rank economic_participati…¹ educational_attainment #>    <chr>        <chr>  <dbl> <dbl>                  <dbl>                  <dbl> #>  1 Afghanistan  South… 0.405   146                  0.189                  0.482 #>  2 Chad         Sub-S… 0.57    145                  0.538                  0.637 #>  3 Algeria      Middl… 0.573   144                  0.317                  0.951 #>  4 Iran (Islam… Middl… 0.575   143                  0.344                  0.96  #>  5 Pakistan     South… 0.575   142                  0.362                  0.825 #>  6 Mali         Sub-S… 0.605   141                  0.489                  0.779 #>  7 Congo, Demo… Sub-S… 0.612   140                  0.676                  0.683 #>  8 Oman         Middl… 0.614   139                  0.488                  0.957 #>  9 Benin        Sub-S… 0.616   138                  0.53                   0.802 #> 10 Guinea       Sub-S… 0.617   137                  0.576                  0.71  #> # ℹ 136 more rows #> # ℹ abbreviated name: ¹​economic_participation_and_opportunity #> # ℹ 16 more variables: health_and_survival <dbl>, political_empowerment <dbl>, #> #   labour_force_participation <dbl>, wage_equality_for_similar_work <dbl>, #> #   estimated_earned_income <dbl>, #> #   legislators_senior_officials_and_managers <dbl>, #> #   professional_and_technical_workers <dbl>, literacy_rate <dbl>, …"},{"path":"/reference/compute-idx.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate multiple indexes at once — compute_indexes","title":"Calculate multiple indexes at once — compute_indexes","text":"Calculate multiple indexes ","code":""},{"path":"/reference/compute-idx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate multiple indexes at once — compute_indexes","text":"","code":"compute_indexes(.data, ...)  # S3 method for idx_res augment(x, ...)"},{"path":"/reference/compute-idx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate multiple indexes at once — compute_indexes","text":".data idx_tbl object ... Unused, included generic consistency x idx_res object, calculated compute_indexes","code":""},{"path":"/reference/compute-idx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate multiple indexes at once — compute_indexes","text":"idx_res object","code":""},{"path":"/reference/compute-idx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate multiple indexes at once — compute_indexes","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(lmomco) library(generics) #>  #> Attaching package: ‘generics’ #> The following object is masked from ‘package:dplyr’: #>  #>     explain #> The following objects are masked from ‘package:base’: #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union res <- tenterfield |>   mutate(month = lubridate::month(ym)) |>   init(id = id, time = ym, group = month) |>   compute_indexes(     spi = idx_spi(),     spei = idx_spei(.lat = lat, .tavg = tavg),     edi = idx_edi()  ) #> [1] \"Checking for missing values (`NA`): all the data must be complete. Input type is vector. Assuming the data are monthly time series starting in January, all regular (non-leap) years.\"  res |> augment() #> # A tibble: 1,107 × 13 #>    .id   id            ym  prcp  tmax  tmin  tavg  long   lat name  month .index #>    <chr> <chr>      <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl> <chr>  #>  1 spi   ASN000… 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tent…     1 .index #>  2 spi   ASN000… 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tent…     2 .index #>  3 spi   ASN000… 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tent…     3 .index #>  4 spi   ASN000… 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tent…     4 .index #>  5 spi   ASN000… 1990 May  1220  19.1  6.66 12.9   152. -29.0 tent…     5 .index #>  6 spi   ASN000… 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tent…     6 .index #>  7 spi   ASN000… 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tent…     7 .index #>  8 spi   ASN000… 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tent…     8 .index #>  9 spi   ASN000… 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tent…     9 .index #> 10 spi   ASN000… 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tent…    10 .index #> # ℹ 1,097 more rows #> # ℹ 1 more variable: .value <dbl>"},{"path":"/reference/dimension-reduction.html","id":null,"dir":"Reference","previous_headings":"","what":"The dimension reduction module — dimension_reduction","title":"The dimension reduction module — dimension_reduction","text":"module combines multiple variables new variable. new variable can linear combination original variables, aggregate_linear(), geometric mean original variables, aggregate_geometry(), created user formula input, aggregate_manual().","code":""},{"path":"/reference/dimension-reduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The dimension reduction module — dimension_reduction","text":"","code":"dimension_reduction(data, ...)  aggregate_linear(formula, weight)  aggregate_geometrical(formula)  aggregate_manual(formula)"},{"path":"/reference/dimension-reduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The dimension reduction module — dimension_reduction","text":"data used dimension_reduction(), idx_tbl object, see [tidyindex::init()] ... used dimension_reduction(), dimension reduction object dim_red class, currently one aggregate_linear(), aggregate_geometrical(), aggregate_manual(). formula formula evaluate weight used aggregate_linear(), column linear weights roles element index table object. See [tidyindex::add_paras()]","code":""},{"path":"/reference/dimension-reduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The dimension reduction module — dimension_reduction","text":"index table object","code":""},{"path":"/reference/dimension-reduction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The dimension reduction module — dimension_reduction","text":"","code":"dt <- gggi |>   dplyr::select(country, sex_ratio_at_birth:healthy_life_expectancy) |>   init()  dt |>   dimension_reduction(health = aggregate_manual(     ~sex_ratio_at_birth * 0.693 + healthy_life_expectancy * 0.307)) #> Index pipeline:  #>  #> Steps:  #> dimension_reduction: `aggregate_manual()` -> health #>  #> Data:  #> # A tibble: 146 × 4 #>    country                      sex_ratio_at_birth healthy_life_expecta…¹ health #>    <chr>                                     <dbl>                  <dbl>  <dbl> #>  1 Afghanistan                               0.944                  0.971  0.952 #>  2 Chad                                      0.944                  1.03   0.970 #>  3 Algeria                                   0.944                  0.99   0.958 #>  4 Iran (Islamic Republic of)                0.944                  1.01   0.964 #>  5 Pakistan                                  0.944                  0.999  0.961 #>  6 Mali                                      0.944                  0.993  0.959 #>  7 Congo, Democratic Republic …              0.944                  1.05   0.977 #>  8 Oman                                      0.944                  1      0.961 #>  9 Benin                                     0.944                  1.04   0.973 #> 10 Guinea                                    0.944                  1.02   0.966 #> # ℹ 136 more rows #> # ℹ abbreviated name: ¹​healthy_life_expectancy dt |>   add_paras(gggi_weights, by = variable) |>   dimension_reduction(health = aggregate_linear(     ~sex_ratio_at_birth:healthy_life_expectancy, weight = var_weight)) #> Index pipeline:  #>  #> Steps:  #> dimension_reduction: `aggregate_linear()` -> health #>  #> Data:  #> # A tibble: 146 × 4 #>    country                      sex_ratio_at_birth healthy_life_expecta…¹ health #>    <chr>                                     <dbl>                  <dbl>  <dbl> #>  1 Afghanistan                               0.944                  0.971  0.952 #>  2 Chad                                      0.944                  1.03   0.970 #>  3 Algeria                                   0.944                  0.99   0.958 #>  4 Iran (Islamic Republic of)                0.944                  1.01   0.964 #>  5 Pakistan                                  0.944                  0.999  0.961 #>  6 Mali                                      0.944                  0.993  0.959 #>  7 Congo, Democratic Republic …              0.944                  1.05   0.977 #>  8 Oman                                      0.944                  1      0.961 #>  9 Benin                                     0.944                  1.04   0.973 #> 10 Guinea                                    0.944                  1.02   0.966 #> # ℹ 136 more rows #> # ℹ abbreviated name: ¹​healthy_life_expectancy dt |>   dimension_reduction(health = aggregate_geometrical(     ~sex_ratio_at_birth:healthy_life_expectancy)   ) #> Index pipeline:  #>  #> Steps:  #> dimension_reduction: `aggregate_geometrical()` -> health #>  #> Data:  #> # A tibble: 146 × 4 #>    country                      sex_ratio_at_birth healthy_life_expecta…¹ health #>    <chr>                                     <dbl>                  <dbl>  <dbl> #>  1 Afghanistan                               0.944                  0.971  0.957 #>  2 Chad                                      0.944                  1.03   0.986 #>  3 Algeria                                   0.944                  0.99   0.967 #>  4 Iran (Islamic Republic of)                0.944                  1.01   0.975 #>  5 Pakistan                                  0.944                  0.999  0.971 #>  6 Mali                                      0.944                  0.993  0.968 #>  7 Congo, Democratic Republic …              0.944                  1.05   0.996 #>  8 Oman                                      0.944                  1      0.972 #>  9 Benin                                     0.944                  1.04   0.990 #> 10 Guinea                                    0.944                  1.02   0.979 #> # ℹ 136 more rows #> # ℹ abbreviated name: ¹​healthy_life_expectancy"},{"path":"/reference/dist-fit.html","id":null,"dir":"Reference","previous_headings":"","what":"The distribution fit module — distribution_fit","title":"The distribution fit module — distribution_fit","text":"module fits distribution variable interest. Currently implemented distributions : gamma, dist_gamma(), generalized logistic, dist_glo(), generalized extreme value, dist_gev(), Pearson Type III, dist_pe3()","code":""},{"path":"/reference/dist-fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The distribution fit module — distribution_fit","text":"","code":"distribution_fit(data, ...)  dist_gamma(var, method = \"lmoms\")  dist_glo(var, method = \"lmoms\")  dist_gev(var, method = \"lmoms\")  dist_pe3(var, method = \"lmoms\")"},{"path":"/reference/dist-fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The distribution fit module — distribution_fit","text":"data index table object ... distribution fit object, currently implemented dist_gamma(), dist_glo(), dist_gev(), dist_pe3() var used dist_*() functions, variable fit method used dist_*() functions, fitting method, currently support \"lmoms\" L-moment fit","code":""},{"path":"/reference/dist-fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The distribution fit module — distribution_fit","text":"index table object","code":""},{"path":"/reference/dist-fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The distribution fit module — distribution_fit","text":"","code":"library(dplyr) library(lmomco) tenterfield |>   mutate(month = lubridate::month(ym)) |>   init(id = id, time = ym, group = month) |>   temporal_aggregate(.agg = temporal_rolling_window(prcp, scale = 12)) |>   distribution_fit(.fit = dist_gamma(.agg, method = \"lmoms\")) #> Index pipeline:  #>  #> Steps:  #> temporal: `rolling_window()` -> .agg #> distribution_fit: `distfit_gamma()` -> .fit #>  #> Data:  #> # A tibble: 369 × 13 #>    id           ym  prcp  tmax  tmin  tavg  long   lat name  month  .agg    .fit #>    <chr>     <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl> <dbl>   <dbl> #>  1 ASN00… 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tent…     1   882 7.25e-8 #>  2 ASN00… 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tent…     2  2142 7.38e-1 #>  3 ASN00… 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tent…     3  2396 3.15e-1 #>  4 ASN00… 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tent…     4  3990 8.12e-1 #>  5 ASN00… 1990 May  1220  19.1  6.66 12.9   152. -29.0 tent…     5  5210 2.40e-1 #>  6 ASN00… 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tent…     6  5604 4.04e-1 #>  7 ASN00… 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tent…     7  6222 8.36e-1 #>  8 ASN00… 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tent…     8  6556 8.25e-1 #>  9 ASN00… 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tent…     9  6822 7.36e-1 #> 10 ASN00… 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tent…    10  7184 7.58e-1 #> # ℹ 359 more rows #> # ℹ 1 more variable: .fit_obj <list>"},{"path":"/reference/drought-idx.html","id":null,"dir":"Reference","previous_headings":"","what":"Drought-related index functions — trans_thornthwaite","title":"Drought-related index functions — trans_thornthwaite","text":"functions used quick computing common drought indexes built wrappers underlying modules. customised needs, users may build indexes modules.","code":""},{"path":"/reference/drought-idx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drought-related index functions — trans_thornthwaite","text":"","code":"trans_thornthwaite(var, lat, na.rm = FALSE, verbose = TRUE)  idx_spi(data, .prcp, .dist = dist_gamma(), .scale = 12)  idx_spei(   data,   .tavg,   .lat,   .prcp,   .pet_method = trans_thornthwaite(),   .scale = 12,   .dist = dist_glo() )  idx_rdi(   data,   .tavg,   .lat,   .prcp,   .pet_method = trans_thornthwaite(),   .scale = 12 )  idx_edi(data, .tavg, .lat, .prcp, .scale = 12)"},{"path":"/reference/drought-idx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drought-related index functions — trans_thornthwaite","text":"var variable transformed, see [tidyindex::variable_trans()] [SPEI::thornthwaite()] lat, na.rm, verbose see [SPEI::thornthwaite] data id_tbl object .dist distribution used distribution fit, see [tidyindex::distribution_fit()] .scale temporal aggregation scale, see [tidyindex::temporal_aggregation()] .tavg, .lat, .prcp variables used index calculation, see Details .pet_method method used calculating potential evapotranspitation, currently trans_thornthwaite()","code":""},{"path":"/reference/drought-idx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drought-related index functions — trans_thornthwaite","text":"explains steps wrapped index intermediate variables created. idx_spi() function performs temporal aggregation input precipitation series,    .prcp, .agg, adistribution fit step aggregated precipitation    , .agg, .fit, normalising step fitted values, .fit,      .index idx_spei() function performs variable transformation step inut average temperature,      .tavg, obtain potential evapotranspiration, .pet, dimension reduction step calculate difference series,      .diff, input precipitation series, .prcp,      .pet, temporal aggregation step difference series, .diff,      .agg, distribution fit step aggregated series, .agg,      .fit, normalising step fitted value, .fit,      obtain .index. idx_rdi() function performs variable transformation step input average temperature,      .tavg, obtain potential evapotranspiration .pet, dimension reduction step calculate ratio input      precipitation, .prcp, .pet .ratio, temporal aggregation step ratio series, .ratio,      .agg variable transformation step take log10 aggregated      series, .agg, .y, rescaling step rescale .y zscore obtain      .index. idx_edi() function performs dimension reduction step aggregate input precipitation      series, prcp, .mult, temporal aggregation step aggregated precipitation series      (.mult) .ep, rescaling step escale .ep zscore obtain      .index.","code":""},{"path":"/reference/drought-idx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drought-related index functions — trans_thornthwaite","text":"","code":"library(dplyr) library(lmomco) dt <- tenterfield |>   mutate(month = lubridate::month(ym)) |>   init(id = id, time = ym, group = month)  dt |> idx_spi() #> Index pipeline:  #>  #> Steps:  #> temporal: `rolling_window()` -> .agg #> distribution_fit: `distfit_gamma()` -> .fit #> normalise: `norm_quantile()` -> .index #>  #> Data:  #> # A tibble: 369 × 14 #>    id           ym  prcp  tmax  tmin  tavg  long   lat name  month  .agg    .fit #>    <chr>     <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl> <dbl>   <dbl> #>  1 ASN00… 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tent…     1   882 7.25e-8 #>  2 ASN00… 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tent…     2  2142 7.38e-1 #>  3 ASN00… 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tent…     3  2396 3.15e-1 #>  4 ASN00… 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tent…     4  3990 8.12e-1 #>  5 ASN00… 1990 May  1220  19.1  6.66 12.9   152. -29.0 tent…     5  5210 2.40e-1 #>  6 ASN00… 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tent…     6  5604 4.04e-1 #>  7 ASN00… 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tent…     7  6222 8.36e-1 #>  8 ASN00… 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tent…     8  6556 8.25e-1 #>  9 ASN00… 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tent…     9  6822 7.36e-1 #> 10 ASN00… 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tent…    10  7184 7.58e-1 #> # ℹ 359 more rows #> # ℹ 2 more variables: .fit_obj <list>, .index <dbl> dt |> idx_spi(.scale = c(12, 24)) #> Index pipeline:  #>  #> Steps:  #> temporal: `rolling_window()` -> .agg_12 #> temporal: `rolling_window()` -> .agg_24 #> distribution_fit: `distfit_gamma()` -> .fit_12 #> distribution_fit: `distfit_gamma()` -> .fit_24 #> normalise: `norm_quantile()` -> .index_12 #> normalise: `norm_quantile()` -> .index_24 #>  #> Data:  #> # A tibble: 369 × 18 #>    id                ym  prcp  tmax  tmin  tavg  long   lat name   month .agg_12 #>    <chr>          <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <dbl>   <dbl> #>  1 ASN00056032 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tente…     1     882 #>  2 ASN00056032 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tente…     2    2142 #>  3 ASN00056032 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tente…     3    2396 #>  4 ASN00056032 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tente…     4    3990 #>  5 ASN00056032 1990 May  1220  19.1  6.66 12.9   152. -29.0 tente…     5    5210 #>  6 ASN00056032 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tente…     6    5604 #>  7 ASN00056032 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tente…     7    6222 #>  8 ASN00056032 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tente…     8    6556 #>  9 ASN00056032 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tente…     9    6822 #> 10 ASN00056032 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tente…    10    7184 #> # ℹ 359 more rows #> # ℹ 7 more variables: .agg_24 <dbl>, .fit_12 <dbl>, .fit_12_obj <list>, #> #   .fit_24 <dbl>, .fit_24_obj <list>, .index_12 <dbl>, .index_24 <dbl> dt |> idx_spei(.lat = lat, .tavg = tavg) #> [1] \"Checking for missing values (`NA`): all the data must be complete. Input type is vector. Assuming the data are monthly time series starting in January, all regular (non-leap) years.\" #> Index pipeline:  #>  #> Steps:  #> variable_transformation: `trans_thornthwaite()` -> .pet #> dimension_reduction: `aggregate_manual()` -> .diff #> temporal: `rolling_window()` -> .agg #> distribution_fit: `distfit_glo()` -> .fit #> normalise: `norm_quantile()` -> .index #>  #> Data:  #> # A tibble: 369 × 16 #>    id             ym  prcp  tmax  tmin  tavg  long   lat name  month  .pet .diff #>    <chr>       <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl> <dbl> <dbl> #>  1 ASN0005… 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tent…     1 113.   769. #>  2 ASN0005… 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tent…     2  97.0 1163. #>  3 ASN0005… 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tent…     3  83.9  170. #>  4 ASN0005… 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tent…     4  62.8 1531. #>  5 ASN0005… 1990 May  1220  19.1  6.66 12.9   152. -29.0 tent…     5  42.1 1178. #>  6 ASN0005… 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tent…     6  22.5  372. #>  7 ASN0005… 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tent…     7  23.1  595. #>  8 ASN0005… 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tent…     8  23.1  311. #>  9 ASN0005… 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tent…     9  41.2  225. #> 10 ASN0005… 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tent…    10  66.1  296. #> # ℹ 359 more rows #> # ℹ 4 more variables: .agg <dbl>, .fit <dbl>, .fit_obj <list>, .index <dbl> dt |> idx_rdi(.lat = lat, .tavg = tavg) #> [1] \"Checking for missing values (`NA`): all the data must be complete. Input type is vector. Assuming the data are monthly time series starting in January, all regular (non-leap) years.\" #> Index pipeline:  #>  #> Steps:  #> variable_transformation: `trans_thornthwaite()` -> .pet #> dimension_reduction: `aggregate_manual()` -> .ratio #> temporal: `rolling_window()` -> .agg #> variable_transformation: `trans_log()` -> .y #> rescaling: `rescale_zscore()` -> .index #>  #> Data:  #> # A tibble: 369 × 15 #>    id            ym  prcp  tmax  tmin  tavg  long   lat name  month  .pet .ratio #>    <chr>      <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl> <dbl>  <dbl> #>  1 ASN000… 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tent…     1 113.    7.80 #>  2 ASN000… 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tent…     2  97.0  13.0  #>  3 ASN000… 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tent…     3  83.9   3.03 #>  4 ASN000… 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tent…     4  62.8  25.4  #>  5 ASN000… 1990 May  1220  19.1  6.66 12.9   152. -29.0 tent…     5  42.1  29.0  #>  6 ASN000… 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tent…     6  22.5  17.5  #>  7 ASN000… 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tent…     7  23.1  26.8  #>  8 ASN000… 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tent…     8  23.1  14.5  #>  9 ASN000… 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tent…     9  41.2   6.45 #> 10 ASN000… 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tent…    10  66.1   5.48 #> # ℹ 359 more rows #> # ℹ 3 more variables: .agg <dbl>, .y <dbl>, .index <dbl> dt |> idx_edi(.lat = lat, .tavg = tavg) #> Index pipeline:  #>  #> Steps:  #> dimension_reduction: `aggregate_manual()` -> .mult #> temporal: `rolling_window()` -> .ep #> rescaling: `rescale_zscore()` -> .index #>  #> Data:  #> # A tibble: 369 × 13 #>    id           ym  prcp  tmax  tmin  tavg  long   lat name  month  .mult    .ep #>    <chr>     <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl>  <dbl>  <dbl> #>  1 ASN00… 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tent…     1  5724.  5724. #>  2 ASN00… 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tent…     2  8173. 13897. #>  3 ASN00… 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tent…     3  1647. 15544. #>  4 ASN00… 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tent…     4 10331. 25875. #>  5 ASN00… 1990 May  1220  19.1  6.66 12.9   152. -29.0 tent…     5  7904. 33779. #>  6 ASN00… 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tent…     6  2551. 36330. #>  7 ASN00… 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tent…     7  4000. 40330. #>  8 ASN00… 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tent…     8  2161. 42491. #>  9 ASN00… 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tent…     9  1720. 44212. #> 10 ASN00… 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tent…    10  2340. 46552. #> # ℹ 359 more rows #> # ℹ 1 more variable: .index <dbl>"},{"path":"/reference/gggi.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Gender Gap Index (2023) — gggi","title":"Global Gender Gap Index (2023) — gggi","text":"Global Gender Gap Index combines 14 variables four dimensions measure gender parity across 146 countries world.","code":""},{"path":"/reference/gggi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Gender Gap Index (2023) — gggi","text":"","code":"gggi  gggi_weights"},{"path":"/reference/gggi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Global Gender Gap Index (2023) — gggi","text":"object class tbl_df (inherits tbl, data.frame) 146 rows 22 columns. object class tbl_df (inherits tbl, data.frame) 14 rows 7 columns.","code":""},{"path":"/reference/gggi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global Gender Gap Index (2023) — gggi","text":"dataset includes country, region, GGGI score rank, combined four dimensions (Economic Participation Opportunity, Educational Attainment, Health Survival, Political Empowerment), variables dimensions. variable composition dimension follows: * Economic Participation Opportunity: Labour force participation, Wage equality similar work, Estimated earned income, Legislators, senior officials managers, Professional technical workers * Educational attainment: Literacy rate, Enrolment primary education, Enrolment secondary education, Enrolment tertiary education * Health survival: Sex ratio birth Healthy life expectancy * Political empowerment:  Women parliament, Women ministerial positions, Years female head state Variable names cleaned [janitor::clean_names()]. weight data extracted page 65 Global Gender Gap Report (see reference), see page 61 region classification.","code":""},{"path":"/reference/gggi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Global Gender Gap Index (2023) — gggi","text":"https://www3.weforum.org/docs/WEF_GGGR_2023.pdf","code":""},{"path":"/reference/hdi.html","id":null,"dir":"Reference","previous_headings":"","what":"Human Development Index (2022) — hdi","title":"Human Development Index (2022) — hdi","text":"Human Development Index (2022)","code":""},{"path":"/reference/hdi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human Development Index (2022) — hdi","text":"","code":"hdi  hdi_scales"},{"path":"/reference/hdi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Human Development Index (2022) — hdi","text":"tibble three columns: id row number country 191 countries computed HDI hdi HDI index value life_exp life expectancy exp_sch expected schooling avg_sch average schooling gni_pc GNI per capital, logged object class tbl_df (inherits tbl, data.frame) 4 rows 5 columns.","code":""},{"path":"/reference/hdi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Human Development Index (2022) — hdi","text":"https://hdr.undp.org/data-center/human-development-index#/indicies/HDI","code":""},{"path":"/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise the tidyindex pipeline — init","title":"Initialise the tidyindex pipeline — init","text":"Initialise index table object data frame tibble.","code":""},{"path":"/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise the tidyindex pipeline — init","text":"","code":"init(data, ...)  # S3 method for idx_tbl print(x, ...)"},{"path":"/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise the tidyindex pipeline — init","text":"data tibble data frame converted index object ... arguments give variables roles, recorded paras element index table object, currently used id time x index object","code":""},{"path":"/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise the tidyindex pipeline — init","text":"index table object","code":""},{"path":"/reference/init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialise the tidyindex pipeline — init","text":"","code":"init(hdi) #> Index pipeline:  #> Summary: NULL #>  #> Data:  #> # A tibble: 191 × 8 #>       id country                  hdi  rank life_exp exp_sch avg_sch gni_pc #>    <dbl> <chr>                  <dbl> <dbl>    <dbl>   <dbl>   <dbl>  <dbl> #>  1     1 Switzerland            0.962     3     84.0    16.5    13.9   4.83 #>  2     2 Norway                 0.961     1     83.2    18.2    13.0   4.81 #>  3     3 Iceland                0.959     2     82.7    19.2    13.8   4.75 #>  4     4 Hong Kong, China (SAR) 0.952     4     85.5    17.3    12.2   4.80 #>  5     5 Australia              0.951     5     84.5    21.1    12.7   4.69 #>  6     6 Denmark                0.948     5     81.4    18.7    13.0   4.78 #>  7     7 Sweden                 0.947     9     83.0    19.4    12.6   4.74 #>  8     8 Ireland                0.945     8     82.0    18.9    11.6   4.88 #>  9     9 Germany                0.942     7     80.6    17.0    14.1   4.74 #> 10    10 Netherlands            0.941    10     81.7    18.7    12.6   4.75 #> # ℹ 181 more rows init(gggi) #> Index pipeline:  #> Summary: NULL #>  #> Data:  #> # A tibble: 146 × 22 #>    country      region index  rank economic_participati…¹ educational_attainment #>    <chr>        <chr>  <dbl> <dbl>                  <dbl>                  <dbl> #>  1 Afghanistan  South… 0.405   146                  0.189                  0.482 #>  2 Chad         Sub-S… 0.57    145                  0.538                  0.637 #>  3 Algeria      Middl… 0.573   144                  0.317                  0.951 #>  4 Iran (Islam… Middl… 0.575   143                  0.344                  0.96  #>  5 Pakistan     South… 0.575   142                  0.362                  0.825 #>  6 Mali         Sub-S… 0.605   141                  0.489                  0.779 #>  7 Congo, Demo… Sub-S… 0.612   140                  0.676                  0.683 #>  8 Oman         Middl… 0.614   139                  0.488                  0.957 #>  9 Benin        Sub-S… 0.616   138                  0.53                   0.802 #> 10 Guinea       Sub-S… 0.617   137                  0.576                  0.71  #> # ℹ 136 more rows #> # ℹ abbreviated name: ¹​economic_participation_and_opportunity #> # ℹ 16 more variables: health_and_survival <dbl>, political_empowerment <dbl>, #> #   labour_force_participation <dbl>, wage_equality_for_similar_work <dbl>, #> #   estimated_earned_income <dbl>, #> #   legislators_senior_officials_and_managers <dbl>, #> #   professional_and_technical_workers <dbl>, literacy_rate <dbl>, …"},{"path":"/reference/normalise.html","id":null,"dir":"Reference","previous_headings":"","what":"The normalise module — normalise","title":"The normalise module — normalise","text":"normalise module takes probability value distribution fit norm_quantile() convert based normal quantile function","code":""},{"path":"/reference/normalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The normalise module — normalise","text":"","code":"normalise(data, ...)  norm_quantile(var)"},{"path":"/reference/normalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The normalise module — normalise","text":"data index table object ... expression evaluated var used norm_quantile(); variable converted","code":""},{"path":"/reference/normalise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The normalise module — normalise","text":"index table object","code":""},{"path":"/reference/normalise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The normalise module — normalise","text":"","code":"library(dplyr) library(lmomco) tenterfield |>   mutate(month = lubridate::month(ym)) |>   init(id = id, time = ym, group = month) |>   temporal_aggregate(.agg = temporal_rolling_window(prcp, scale = 12)) |>   distribution_fit(.fit = dist_gamma(.agg, method = \"lmoms\")) |>   normalise(index = norm_quantile(.fit)) #> Index pipeline:  #>  #> Steps:  #> temporal: `rolling_window()` -> .agg #> distribution_fit: `distfit_gamma()` -> .fit #> normalise: `norm_quantile()` -> index #>  #> Data:  #> # A tibble: 369 × 14 #>    id           ym  prcp  tmax  tmin  tavg  long   lat name  month  .agg    .fit #>    <chr>     <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl> <dbl>   <dbl> #>  1 ASN00… 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tent…     1   882 7.25e-8 #>  2 ASN00… 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tent…     2  2142 7.38e-1 #>  3 ASN00… 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tent…     3  2396 3.15e-1 #>  4 ASN00… 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tent…     4  3990 8.12e-1 #>  5 ASN00… 1990 May  1220  19.1  6.66 12.9   152. -29.0 tent…     5  5210 2.40e-1 #>  6 ASN00… 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tent…     6  5604 4.04e-1 #>  7 ASN00… 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tent…     7  6222 8.36e-1 #>  8 ASN00… 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tent…     8  6556 8.25e-1 #>  9 ASN00… 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tent…     9  6822 7.36e-1 #> 10 ASN00… 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tent…    10  7184 7.58e-1 #> # ℹ 359 more rows #> # ℹ 2 more variables: .fit_obj <list>, index <dbl>"},{"path":"/reference/rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"The rescaling module — rescaling","title":"The rescaling module — rescaling","text":"rescale module changes scale variable(s) using one available rescaling functions: rescale_zscore(), rescale_minmax(), rescale_center.","code":""},{"path":"/reference/rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The rescaling module — rescaling","text":"","code":"rescaling(data, ...)  rescale_zscore(var, na.rm = TRUE)  rescale_minmax(var, min = NULL, max = NULL, na.rm = TRUE, censor = TRUE)  rescale_center(var, na.rm = TRUE)"},{"path":"/reference/rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The rescaling module — rescaling","text":"data index table object, see [tidyindex::init()] ... used rescaling, rescaling object class rescale, currently one rescale_zscore(), rescale_minmax(), rescale_center(), var variable(s) rescale, accept tidyselect syntax na.rm used rescale_*(), logical, whether remove NAs min, max used rescale_minmax(), minimum maximum value censor used rescale_minmax(), logical; whether censor points outside min max, provided","code":""},{"path":"/reference/rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The rescaling module — rescaling","text":"index table object","code":""},{"path":"/reference/rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The rescaling module — rescaling","text":"","code":"dt <- hdi |> init() dt |> rescaling(life_exp = rescale_zscore(life_exp)) #> Index pipeline:  #>  #> Steps:  #> rescaling: `rescale_zscore()` -> life_exp #>  #> Data:  #> # A tibble: 191 × 8 #>       id country                  hdi  rank life_exp exp_sch avg_sch gni_pc #>    <dbl> <chr>                  <dbl> <dbl>    <dbl>   <dbl>   <dbl>  <dbl> #>  1     1 Switzerland            0.962     3     1.66    16.5    13.9   4.83 #>  2     2 Norway                 0.961     1     1.56    18.2    13.0   4.81 #>  3     3 Iceland                0.959     2     1.49    19.2    13.8   4.75 #>  4     4 Hong Kong, China (SAR) 0.952     4     1.85    17.3    12.2   4.80 #>  5     5 Australia              0.951     5     1.73    21.1    12.7   4.69 #>  6     6 Denmark                0.948     5     1.32    18.7    13.0   4.78 #>  7     7 Sweden                 0.947     9     1.53    19.4    12.6   4.74 #>  8     8 Ireland                0.945     8     1.40    18.9    11.6   4.88 #>  9     9 Germany                0.942     7     1.22    17.0    14.1   4.74 #> 10    10 Netherlands            0.941    10     1.36    18.7    12.6   4.75 #> # ℹ 181 more rows dt |> rescaling(life_exp2 = rescale_minmax(life_exp, min = 20, max = 85)) #> Index pipeline:  #>  #> Steps:  #> rescaling: `rescale_minmax()` -> life_exp2 #>  #> Data:  #> # A tibble: 191 × 9 #>       id country             hdi  rank life_exp exp_sch avg_sch gni_pc life_exp2 #>    <dbl> <chr>             <dbl> <dbl>    <dbl>   <dbl>   <dbl>  <dbl>     <dbl> #>  1     1 Switzerland       0.962     3     84.0    16.5    13.9   4.83     0.984 #>  2     2 Norway            0.961     1     83.2    18.2    13.0   4.81     0.973 #>  3     3 Iceland           0.959     2     82.7    19.2    13.8   4.75     0.964 #>  4     4 Hong Kong, China… 0.952     4     85.5    17.3    12.2   4.80     1     #>  5     5 Australia         0.951     5     84.5    21.1    12.7   4.69     0.993 #>  6     6 Denmark           0.948     5     81.4    18.7    13.0   4.78     0.944 #>  7     7 Sweden            0.947     9     83.0    19.4    12.6   4.74     0.969 #>  8     8 Ireland           0.945     8     82.0    18.9    11.6   4.88     0.954 #>  9     9 Germany           0.942     7     80.6    17.0    14.1   4.74     0.933 #> 10    10 Netherlands       0.941    10     81.7    18.7    12.6   4.75     0.949 #> # ℹ 181 more rows"},{"path":"/reference/swap.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing alternatives — swap_values","title":"Testing alternatives — swap_values","text":"two functions allows substitute value/expression pipeline options. functions evaluate modified pipeline step, well prior subsequent steps create different versions index.","code":""},{"path":"/reference/swap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing alternatives — swap_values","text":"","code":"swap_values(data, .var, .param, .values)  swap_exprs(data, .var, .exprs)"},{"path":"/reference/swap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Testing alternatives — swap_values","text":"data idx_tbl object .var name variable, step tested alternatives .param name parameter swap .values, .exprs list values expressions","code":""},{"path":"/reference/swap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Testing alternatives — swap_values","text":"index table","code":""},{"path":"/reference/swap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Testing alternatives — swap_values","text":"","code":"library(generics) hdi_paras <- hdi_scales |> dplyr::add_row(dimension = \"Education\", name = \"Education\",                var = \"sch\", min = 0, max = 0) |>   dplyr::mutate(weight = c(1/3, 0, 0, 1/3, 1/3),                 weight2 = c(0.1, 0, 0, 0.8, 0.1),                 weight3 = c(0.8, 0, 0, 0.1, 0.1),                 weight4 = c(0.1, 0, 0, 0.1, 0.8))  dt <- hdi |>   init(id = country) |>   add_paras(hdi_paras, by = var) |>   rescaling(life_exp = rescale_minmax(life_exp, min = min, max = max)) |>   rescaling(exp_sch = rescale_minmax(exp_sch, min = min, max = max)) |>   rescaling(avg_sch = rescale_minmax(avg_sch, min = min, max = max)) |>   rescaling(gni_pc = rescale_minmax(gni_pc, min = min, max = max)) |>   dimension_reduction(sch = aggregate_manual(~(exp_sch + avg_sch)/2)) |>   dimension_reduction(index = aggregate_linear(~c(life_exp, sch, gni_pc),                       weight = weight))   dt2 <- dt |>   swap_values(.var = \"index\", .param = weight,               .value = list(weight2, weight3, weight4)) #> Joining with `by = join_by(variables)` augment(dt2) #> # A tibble: 764 × 12 #>    .id       id country   hdi  rank life_exp exp_sch avg_sch gni_pc   sch .index #>    <chr>  <dbl> <chr>   <dbl> <dbl>    <dbl>   <dbl>   <dbl>  <dbl> <dbl> <chr>  #>  1 weight     1 Switze… 0.962     3    0.984   0.917   0.924  0.983 0.920 index  #>  2 weight     2 Norway  0.961     1    0.973   1       0.867  0.978 0.933 index  #>  3 weight     3 Iceland 0.959     2    0.964   1       0.918  0.955 0.959 index  #>  4 weight     4 Hong K… 0.952     4    1       0.960   0.815  0.973 0.887 index  #>  5 weight     5 Austra… 0.951     5    0.993   1       0.848  0.936 0.924 index  #>  6 weight     6 Denmark 0.948     5    0.944   1       0.864  0.967 0.932 index  #>  7 weight     7 Sweden  0.947     9    0.969   1       0.841  0.952 0.920 index  #>  8 weight     8 Ireland 0.945     8    0.954   1       0.772  1     0.886 index  #>  9 weight     9 Germany 0.942     7    0.933   0.945   0.939  0.952 0.942 index  #> 10 weight    10 Nether… 0.941    10    0.949   1       0.839  0.956 0.919 index  #> # ℹ 754 more rows #> # ℹ 1 more variable: .value <dbl>  dt3 <- dt |>   swap_exprs(.var = index, .exprs = list(              aggregate_geometrical(~c(life_exp, sch, gni_pc)))) #> Joining with `by = join_by(variables)` augment(dt3) #> # A tibble: 382 × 12 #>    .id      id country    hdi  rank life_exp exp_sch avg_sch gni_pc   sch .index #>    <chr> <dbl> <chr>    <dbl> <dbl>    <dbl>   <dbl>   <dbl>  <dbl> <dbl> <chr>  #>  1 1         1 Switzer… 0.962     3    0.984   0.917   0.924  0.983 0.920 index  #>  2 1         2 Norway   0.961     1    0.973   1       0.867  0.978 0.933 index  #>  3 1         3 Iceland  0.959     2    0.964   1       0.918  0.955 0.959 index  #>  4 1         4 Hong Ko… 0.952     4    1       0.960   0.815  0.973 0.887 index  #>  5 1         5 Austral… 0.951     5    0.993   1       0.848  0.936 0.924 index  #>  6 1         6 Denmark  0.948     5    0.944   1       0.864  0.967 0.932 index  #>  7 1         7 Sweden   0.947     9    0.969   1       0.841  0.952 0.920 index  #>  8 1         8 Ireland  0.945     8    0.954   1       0.772  1     0.886 index  #>  9 1         9 Germany  0.942     7    0.933   0.945   0.939  0.952 0.942 index  #> 10 1        10 Netherl… 0.941    10    0.949   1       0.839  0.956 0.919 index  #> # ℹ 372 more rows #> # ℹ 1 more variable: .value <dbl>"},{"path":"/reference/temporal-aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"The temporal processing module — temporal_aggregate","title":"The temporal processing module — temporal_aggregate","text":"temporal processing module used aggregate data along temporal dimension. Current available aggregation recipe includes  temporal_rolling_window.","code":""},{"path":"/reference/temporal-aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The temporal processing module — temporal_aggregate","text":"","code":"temporal_aggregate(data, ...)  temporal_rolling_window(   var,   scale,   .before = 0L,   .step = 1L,   .complete = FALSE,   ... )"},{"path":"/reference/temporal-aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The temporal processing module — temporal_aggregate","text":"data index table object, see [tidyindex::init()] ... temporal processing object class temporal_agg var variable aggregate scale numeric, scale (window) aggregation ., .step, .complete see slide_dbl","code":""},{"path":"/reference/temporal-aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The temporal processing module — temporal_aggregate","text":"index table object","code":""},{"path":"/reference/temporal-aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The temporal processing module — temporal_aggregate","text":"","code":"tenterfield |>   init(time = ym) |>   temporal_aggregate(.agg = temporal_rolling_window(prcp, scale = 12)) #> Index pipeline:  #>  #> Steps:  #> temporal: `rolling_window()` -> .agg #>  #> Data:  #> # A tibble: 369 × 10 #>    id                ym  prcp  tmax  tmin  tavg  long   lat name            .agg #>    <chr>          <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>          <dbl> #>  1 ASN00056032 1990 Jan   882  27.0 15.2  21.1   152. -29.0 tenterfield (…   882 #>  2 ASN00056032 1990 Feb  1260  26.1 16.0  21.0   152. -29.0 tenterfield (…  2142 #>  3 ASN00056032 1990 Mar   254  23.8 13.4  18.6   152. -29.0 tenterfield (…  2396 #>  4 ASN00056032 1990 Apr  1594  20.4 12.5  16.5   152. -29.0 tenterfield (…  3990 #>  5 ASN00056032 1990 May  1220  19.1  6.66 12.9   152. -29.0 tenterfield (…  5210 #>  6 ASN00056032 1990 Jun   394  14.6  3.19  8.88  152. -29.0 tenterfield (…  5604 #>  7 ASN00056032 1990 Jul   618  15.5  1.95  8.75  152. -29.0 tenterfield (…  6222 #>  8 ASN00056032 1990 Aug   334  14.3  2.49  8.41  152. -29.0 tenterfield (…  6556 #>  9 ASN00056032 1990 Sep   266  18.7  5.4  12.1   152. -29.0 tenterfield (…  6822 #> 10 ASN00056032 1990 Oct   362  23.3  7.6  15.4   152. -29.0 tenterfield (…  7184 #> # ℹ 359 more rows  # multiple ids (groups), and multiple scales queensland |>   dplyr::filter(id %in% c(\"ASN00029038\", \"ASN00029127\")) |>   init(id = id, time = ym) |>   temporal_aggregate(temporal_rolling_window(prcp, scale = c(12, 24))) #> Index pipeline:  #>  #> Steps:  #> temporal: `rolling_window()` -> rolling_window_12 #> temporal: `rolling_window()` -> rolling_window_24 #>  #> Data:  #> # A tibble: 776 × 11 #>    id             ym  prcp  tmax  tmin  tavg  long   lat name  rolling_window_12 #>    <chr>       <mth> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>             <dbl> #>  1 ASN0002… 1990 Jan  1682  34.3  24.7  29.5  142. -15.5 KOWA…              1682 #>  2 ASN0002… 1990 Feb   416  35.2  23.2  29.2  142. -15.5 KOWA…              2098 #>  3 ASN0002… 1990 Mar  2026  32.5  23.6  28.0  142. -15.5 KOWA…              4124 #>  4 ASN0002… 1990 Apr   597  32.9  17.7  25.3  142. -15.5 KOWA…              4721 #>  5 ASN0002… 1990 May   244  31.8  20.1  25.9  142. -15.5 KOWA…              4965 #>  6 ASN0002… 1990 Jun   170  29.7  16.2  23.0  142. -15.5 KOWA…              5135 #>  7 ASN0002… 1990 Jul   102  31.2  17.2  24.2  142. -15.5 KOWA…              5237 #>  8 ASN0002… 1990 Aug     0  31.3  13.1  22.2  142. -15.5 KOWA…              5237 #>  9 ASN0002… 1990 Sep     0  32.8  16.3  24.5  142. -15.5 KOWA…              5237 #> 10 ASN0002… 1990 Oct     0  36.8  21.5  29.2  142. -15.5 KOWA…              5237 #> # ℹ 766 more rows #> # ℹ 1 more variable: rolling_window_24 <dbl>"},{"path":"/reference/theme_benchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"A ggplot2 theme for benchmarking the index series — theme_benchmark","title":"A ggplot2 theme for benchmarking the index series — theme_benchmark","text":"ggplot2 theme benchmarking index series","code":""},{"path":"/reference/theme_benchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A ggplot2 theme for benchmarking the index series — theme_benchmark","text":"","code":"theme_benchmark(yintercept = -2, linetype = \"dashed\")"},{"path":"/reference/theme_benchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A ggplot2 theme for benchmarking the index series — theme_benchmark","text":"yintercept intercpt linetype linetype","code":""},{"path":"/reference/theme_benchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A ggplot2 theme for benchmarking the index series — theme_benchmark","text":"ggplot2 object","code":""},{"path":"/reference/theme_benchmark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A ggplot2 theme for benchmarking the index series — theme_benchmark","text":"","code":"if (require(\"ggplot2\", quietly = TRUE) ){ dplyr::tibble(x = 1:100, y = rnorm(100, sd = 2)) |>   ggplot(aes(x = x, y =y )) +   geom_line() +   theme_benchmark() }"},{"path":"/reference/tidyindex-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyindex: A general data pipeline for computing indexes — tidyindex-package","title":"tidyindex: A general data pipeline for computing indexes — tidyindex-package","text":"Tools construct analyse indexes pipeline workflow. `tidyindex` contains modules transforming variables, aggregating variables across time, reducing data dimension weighting, fitting distributions.","code":""},{"path":[]},{"path":"/reference/tidyindex-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyindex: A general data pipeline for computing indexes — tidyindex-package","text":"Maintainer: H. Sherry Zhang huize.zhang@monash.edu (ORCID) Authors: Dianne Cook dicook@monash.edu (ORCID) Ursula Laa ursula.laa@boku.ac.(ORCID) Nicolas Langrené nicolas.langrene@csiro.au (ORCID) Patricia Menéndez patricia.menendez@monash.edu (ORCID)","code":""},{"path":"/reference/variable-transformation.html","id":null,"dir":"Reference","previous_headings":"","what":"The variable transformation module — variable_trans","title":"The variable transformation module — variable_trans","text":"variable transformation module used transform single variable index table object. transformation specified variable transformation object class var_trans, created  trans_* functions. Currently, following transformation functions  supported: trans_log10, trans_quadratic,  trans_square_root, trans_cubic_root.","code":""},{"path":"/reference/variable-transformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The variable transformation module — variable_trans","text":"","code":"variable_trans(data, ...)  trans_log10(var)  trans_quadratic(var)  trans_square_root(var)  trans_cubic_root(var)"},{"path":"/reference/variable-transformation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The variable transformation module — variable_trans","text":"data index table object ... variable transformation recipe class var_trans, created trans_* function, transformation recipe evaluated var used trans_* functions, variable transformed","code":""},{"path":"/reference/variable-transformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The variable transformation module — variable_trans","text":"index table object","code":""},{"path":"/reference/variable-transformation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The variable transformation module — variable_trans","text":"","code":"hdi |> init() |> variable_trans(gni_pc = trans_log10(gni_pc)) #> Index pipeline:  #>  #> Steps:  #> variable_transformation: `trans_log()` -> gni_pc #>  #> Data:  #> # A tibble: 191 × 8 #>       id country                  hdi  rank life_exp exp_sch avg_sch gni_pc #>    <dbl> <chr>                  <dbl> <dbl>    <dbl>   <dbl>   <dbl>  <dbl> #>  1     1 Switzerland            0.962     3     84.0    16.5    13.9  0.684 #>  2     2 Norway                 0.961     1     83.2    18.2    13.0  0.682 #>  3     3 Iceland                0.959     2     82.7    19.2    13.8  0.676 #>  4     4 Hong Kong, China (SAR) 0.952     4     85.5    17.3    12.2  0.681 #>  5     5 Australia              0.951     5     84.5    21.1    12.7  0.671 #>  6     6 Denmark                0.948     5     81.4    18.7    13.0  0.679 #>  7     7 Sweden                 0.947     9     83.0    19.4    12.6  0.675 #>  8     8 Ireland                0.945     8     82.0    18.9    11.6  0.689 #>  9     9 Germany                0.942     7     80.6    17.0    14.1  0.675 #> 10    10 Netherlands            0.941    10     81.7    18.7    12.6  0.677 #> # ℹ 181 more rows"},{"path":"/reference/weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Weather data for in-situ stations in Queensland from 1990 to 2020 — tenterfield","title":"Weather data for in-situ stations in Queensland from 1990 to 2020 — tenterfield","text":"Weather data -situ stations Queensland 1990 2020","code":""},{"path":"/reference/weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather data for in-situ stations in Queensland from 1990 to 2020 — tenterfield","text":"","code":"tenterfield  aus_climate  queensland"},{"path":"/reference/weather.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Weather data for in-situ stations in Queensland from 1990 to 2020 — tenterfield","text":"tibble 9 columns: id station ID, ASN000xxxxx ym date `tsibble::yearmonth` format prcp aggregated monthly precipitation daily data tmax, tmin, tavg maximum/minimum/ average temperature long, lat longitude latitude station name station name object class tbl_df (inherits tbl, data.frame) 52373 rows 9 columns. object class tbl_df (inherits tbl, data.frame) 11252 rows 9 columns.","code":""}]
